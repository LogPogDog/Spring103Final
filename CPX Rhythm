#include <AsyncDelay.h>
#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>

//NOTE: Setup and other functions besides interrupts are WAY down. This is due to the massive nature of the arrays. Scroll to the bottom!

//Variables for MIDI
float midi[127];
int A_four = 440;

//variable to keep track of the meter
int meter = 0;

//Delays for each category of difficulty and the meter. The offset delays are used for starting the actual delays.
AsyncDelay meterDelay;
AsyncDelay RGREATDelay;
AsyncDelay ROKAYDelay;
AsyncDelay LGREATDelay;
AsyncDelay LOKAYDelay;

AsyncDelay RGREAToffset;
AsyncDelay ROKAYoffset;
AsyncDelay LGREAToffset;
AsyncDelay LOKAYoffset;

//Bools to keep track of whether offset delays have started or not
bool RGREATflag = 0;
bool ROKAYflag = 0;
bool LGREATflag = 0;
bool LOKAYflag = 0;

//INTERRUPTS
const int LeftButton = 4;
const int RightButton = 5;
volatile bool lbuttonFlag = 0;
volatile bool rbuttonFlag = 0;

//Global variable for user score and the value of each hit
int score = 0;
const int great = 300;
const int okay = 100;
const int miss = 100;

//Array to keep track of which pixels are on during the game
bool litPixels[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

//interrupt functions set flag to true, which cancels all for loops in the five functions, and then change value of mode control up or down

void lbuttonISR() {
  lbuttonFlag = 1;
}

void rbuttonISR() {
  rbuttonFlag = 1;
}

//Arrays to store the 3 difficulty levels (1 per button), which are defined later by corresponding functions in setup. Sets all values to 0 to begin with.
bool LEasy[1006] = {0};
bool LHard[1006] = {0};
bool LDemon[1006] = {0};
bool REasy[1006] = {0};
bool RHard[1006] = {0};
bool RDemon[1006] = {0};

//Array to store MIDI pitch sequence for Spear of Justice by Toby Fox, grouped into measures with 5 beats of nothing on either side. Frequency of 127 indicates rest, 128 indicates hold previous note. 6/8, so 12 16th notes per measure.
int spearOfJustice[1006] = {127, 127, 127, 127, 127,

//Measure 1
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 2
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 3
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 4
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 5
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 6
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 7
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 8
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 9
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 10
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 11
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 12
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 13
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 14
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 15
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 16
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 17 - KEY CHANGE
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 18
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 19
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
75, //Eb5
127, //Rest
73, //Db5
127, //Rest

//Measure 20
75, //Eb5
127, //Rest
73, //Db5
127, //Rest
71, //B4
127, //Rest
70, //Bb4
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
127, //Rest

//Measure 21
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 22
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 23
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
75, //Eb5
127, //Rest
73, //Db5
127, //Rest

//Measure 24
75, //Eb5
127, //Rest
73, //Db5
127, //Rest
71, //B4
127, //Rest
70, //Bb4
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
127, //Rest

//Measure 25
80, //Ab5
127, //Rest
76, //E5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest
79, //G5
127, //Rest
82, //Bb5
127, //Rest

//Measure 26
80, //Ab5
127, //Rest
76, //E5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest
79, //G5
127, //Rest
82, //Bb5
127, //Rest

//Measure 27
80, //Ab5
127, //Rest
76, //E5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest
127, //Rest
68, //Ab4
61, //Db4
64, //E4

//Measure 28 - CHANGE IN PATTERN
63, //Eb4
127, //Rest
127, //Rest
68, //Ab4
127, //Rest
71, //B4
68, //Ab4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
70, //Bb4

//Measure 29
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
68, //Ab4
64, //E4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
75, //Eb5

//Measure 30
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
63, //Eb4
68, //Ab4
127, //Rest
66, //Gb4
127, //Rest
64, //E4
127, //Rest

//Measure 31
66, //Gb4
64, //E4
63, //Eb4
61, //Db4
127, //Rest
68, //Ab4
63, //Eb4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 32
63, //Eb4
127, //Rest
127, //Rest
68, //Ab4
127, //Rest
71, //B4
68, //Ab4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
70, //Bb4

//Measure 33
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
68, //Ab4
64, //E4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
75, //Eb5

//Measure 34
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
63, //Eb4
68, //Ab4
127, //Rest
66, //Gb4
127, //Rest
64, //E4
127, //Rest

//Measure 35
66, //Gb4
64, //E4
63, //Eb4
61, //Db4
127, //Rest
68, //Ab4
63, //Eb4
128, //Hold
128, //Hold
127, //Rest
68, //Ab4
70, //Bb4

//Measure 36
71, //B4
127, //Rest
71, //B4
71, //B4
127, //Rest
71, //B4
70, //Bb4
127, //Rest
82, //Bb5
83, //B5
82, //Bb5
83, //B5

//Measure 37
82, //Bb5
127, //Rest
127, //Rest
85, //Db6
127, //Rest
127, //Rest
80, //Ab5
127, //Rest
127, //Rest
70, //Bb4
71, //B4
70, //Bb4

//Measure 38
71, //B4
127, //Rest
71, //B4
71, //B4
127, //Rest
71, //B4
70, //Bb4
127, //Rest
82, //Bb5
83, //B5
82, //Bb5
83, //B5

//Measure 39
80, //Ab5
127, //Rest
127, //Rest
87, //Eb6
127, //Rest
127, //Rest
85, //Db6
127, //Rest
127, //Rest
70, //Bb4
71, //B4
70, //Bb4

//Measure 40
71, //B4
127, //Rest
71, //B4
71, //B4
127, //Rest
71, //B4
70, //Bb4
127, //Rest
82, //Bb5
83, //B5
82, //Bb5
83, //B5

//Measure 41
82, //Bb5
127, //Rest
127, //Rest
85, //Db6
127, //Rest
127, //Rest
80, //Ab5
127, //Rest
127, //Rest
70, //Bb4
71, //B4
70, //Bb4

//Measure 42
71, //B4
127, //Rest
71, //B4
71, //B4
127, //Rest
71, //B4
70, //Bb4
127, //Rest
82, //Bb5
83, //B5
82, //Bb5
83, //B5

//Measure 43
80, //Ab5
127, //Rest
127, //Rest
87, //Eb6
127, //Rest
127, //Rest
85, //Db6
127, //Rest
127, //Rest
68, //Ab4
61, //Db4
64, //E4

//Measure 44
63, //Eb4
127, //Rest
127, //Rest
68, //Ab4
127, //Rest
71, //B4
68, //Ab4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
70, //Bb4

//Measure 45
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
68, //Ab4
64, //E4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
75, //Eb5

//Measure 46
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
63, //Eb4
68, //Ab4
127, //Rest
66, //Gb4
127, //Rest
64, //E4
127, //Rest

//Measure 47
66, //Gb4
64, //E4
63, //Eb4
61, //Db4
127, //Rest
68, //Ab4
63, //Eb4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 48
63, //Eb4
127, //Rest
127, //Rest
68, //Ab4
127, //Rest
71, //B4
68, //Ab4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
70, //Bb4

//Measure 49
71, //B4
127, //Rest
127, //Rest
70, //Bb4
127, //Rest
68, //Ab4
64, //E4
127, //Rest
70, //Bb4
71, //B4
73, //Db5
75, //Eb5

//Measure 50
78, //Gb5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
71, //B4
73, //Db5
127, //Rest
71, //B4
127, //Rest
70, //Bb4
127, //Rest

//Measure 51
71, //B4
70, //Bb4
68, //Ab4
66, //Gb4
127, //Rest
70, //Bb4
68, //Ab4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 52 - KEY CHANGE
62, //D4
127, //Rest
127, //Rest
67, //G4
127, //Rest
70, //Bb4
67, //G4
127, //Rest
69, //A4
70, //Bb4
72, //C5
69, //A4

//Measure 53
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
67, //G4
63, //Eb4
127, //Rest
69, //A4
70, //Bb4
72, //C5
74, //D5

//Measure 54
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
62, //D4
67, //G4
127, //Rest
65, //F4
127, //Rest
63, //Eb4
127, //Rest

//Measure 55
65, //F4
63, //Eb4
62, //D4
60, //C4
127, //Rest
67, //G4
62, //D4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 56
62, //D4
127, //Rest
127, //Rest
67, //G4
127, //Rest
70, //Bb4
67, //G4
127, //Rest
69, //A4
70, //Bb4
72, //C5
69, //A4

//Measure 57
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
67, //G4
63, //Eb4
127, //Rest
69, //A4
70, //Bb4
72, //C5
74, //D5

//Measure 58
77, //F5
127, //Rest
127, //Rest
74, //D5
127, //Rest
70, //Bb4
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest

//Measure 59
70, //Bb4
69, //A4
67, //G4
65, //F4
127, //Rest
69, //A4
67, //G4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 60
62, //D4
127, //Rest
127, //Rest
67, //G4
127, //Rest
70, //Bb4
67, //G4
127, //Rest
69, //A4
70, //Bb4
72, //C5
69, //A4

//Measure 61
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
67, //G4
63, //Eb4
127, //Rest
69, //A4
70, //Bb4
72, //C5
74, //D5

//Measure 62
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
62, //D4
67, //G4
127, //Rest
65, //F4
127, //Rest
63, //Eb4
127, //Rest

//Measure 63
65, //F4
63, //Eb4
62, //D4
60, //C4
127, //Rest
67, //G4
62, //D4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 64
62, //D4
127, //Rest
127, //Rest
67, //G4
127, //Rest
70, //Bb4
67, //G4
127, //Rest
69, //A4
70, //Bb4
72, //C5
69, //A4

//Measure 65
70, //Bb4
127, //Rest
127, //Rest
69, //A4
127, //Rest
67, //G4
63, //Eb4
127, //Rest
69, //A4
70, //Bb4
72, //C5
74, //D5

//Measure 66
77, //F5
127, //Rest
127, //Rest
74, //D5
127, //Rest
70, //Bb4
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest

//Measure 67
70, //Bb4
69, //A4
67, //G4
65, //F4
127, //Rest
69, //A4
67, //G4
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

//Measure 68 - BACK TO FIRST SECTION
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 69
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 70
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 71
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 72
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 73
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
72, //C5
127, //Rest
74, //D5
127, //Rest

//Measure 74
79, //G5
127, //Rest
127, //Rest
74, //D5
127, //Rest
77, //F5
76, //E5
127, //Rest
74, //D5
127, //Rest
72, //C5
127, //Rest

//Measure 75
74, //D5
127, //Rest
72, //C5
127, //Rest
70, //Bb4
127, //Rest
69, //A4
127, //Rest
74, //D5
127, //Rest
77, //F5
127, //Rest

//Measure 76 - KEY CHANGE
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 77
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 78
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
75, //Eb5
127, //Rest
73, //Db5
127, //Rest

//Measure 79
75, //Eb5
127, //Rest
73, //Db5
127, //Rest
71, //B4
127, //Rest
70, //Bb4
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
127, //Rest

//Measure 80
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 81
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
73, //Db5
127, //Rest
75, //Eb5
127, //Rest

//Measure 82
80, //Ab5
127, //Rest
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
77, //F5
127, //Rest
75, //Eb5
127, //Rest
73, //Db5
127, //Rest

//Measure 83 - LAST MEASURE
75, //Eb5
127, //Rest
75, //Eb5
127, //Rest
78, //Gb5
127, //Rest
80, //Ab5
128, //Hold
128, //Hold
128, //Hold
128, //Hold
127, //Rest

  127,127,127,127,127};



void setup(void) {

  CircuitPlayground.begin();
  //INTERRUPTS
  pinMode(LeftButton, INPUT_PULLDOWN); // Left button, pulldown enabled
  pinMode(RightButton, INPUT_PULLDOWN); // Right button, pulldown enabled
  attachInterrupt(digitalPinToInterrupt(LeftButton), lbuttonISR, FALLING); 
  attachInterrupt(digitalPinToInterrupt(RightButton), rbuttonISR, FALLING);

  //Run this function to create the MIDI array from frequencies
  generateMIDI();

  //Run these functions to define the difficulty arrays
  defineDemon();

  Serial.begin(9600);
  Serial.println("Loading...");
  while(!Serial); // Pause program till serial opens

  //Start and expire the METER, GREAT and OKAY Delays for future usage. Song is 144 bpm, which gives 2304 sixteenth notes per minute, so 38.4 notes per second, so notes are about 26 ms long. To make it easier, however, 50 ms meter will be used for 16 notes.
  meterDelay.start(110, AsyncDelay::MILLIS); //Add 50 ms since the playTone function actually delays twice for 50 ms
  //meterDelay.start(2, AsyncDelay::MILLIS); //THIS IS FOR DEBUGGING SPEECH
  RGREATDelay.start(110, AsyncDelay::MILLIS); //This is +/- 55 ms leniency
  ROKAYDelay.start(220, AsyncDelay::MILLIS); //This is +/- 110 ms leniency
  LGREATDelay.start(110, AsyncDelay::MILLIS);
  LOKAYDelay.start(220, AsyncDelay::MILLIS);
  RGREAToffset.start(55, AsyncDelay::MILLIS); //This begins the beat before a note, so RGREATDelay will start 55ms before the actual beat.
  ROKAYoffset.start(220, AsyncDelay::MILLIS); //This begins 3 beats in advance, so ROKAYDelay will start 110 ms before the actual beat.
  LGREAToffset.start(55, AsyncDelay::MILLIS); //This begins the beat before a note, so LGREATDelay will start 55ms before the actual beat.
  LOKAYoffset.start(220, AsyncDelay::MILLIS); //This begins 3 beats in advance, so LOKAYDelay will start 110 ms before the actual beat.
  meterDelay.expire();
  RGREATDelay.expire();
  ROKAYDelay.expire();
  LGREATDelay.expire();
  LOKAYDelay.expire();
  RGREAToffset.expire();
  ROKAYoffset.expire();
  LGREAToffset.expire();
  LOKAYoffset.expire();
}

void loop(void)
{
  //Check if right button has been pressed. If so, continue checks to assign points.
  if (rbuttonFlag) {

    // Check if GREATDelay is expired. If yes, move on. If no, assign "great" points and expire both GREAT and OKAY delays.
    if (RGREATDelay.isExpired()) {

      //Check if OKAYDelay is expired. If yes, the user missed and decrement by "miss" points. If not, assign "okay" points and expire okay delay.
      if (ROKAYDelay.isExpired()) {
        score = score - miss;
        CircuitPlayground.setPixelColor(9, 255, 0, 0); //Set pixel color to red to indicate MISS
        Serial.println("Miss!");
      } else {
        score = score + okay;
        CircuitPlayground.setPixelColor(9, 255, 255, 0); //Set pixel color to yellow to indicate OKAY
        ROKAYDelay.expire();
        Serial.println("Okay!");
      }

    } else {
      score = score + great;
      CircuitPlayground.setPixelColor(9, 0, 255, 0); //Set pixel color to green to indicate GREAT
      RGREATDelay.expire();
      ROKAYDelay.expire();
      Serial.println("GREAT!");
    }

    //Set buttonFlag back to 0
    rbuttonFlag = 0;

    //Print score with each button press
    Serial.print("Current Score: ");
    Serial.println(score);

  }

  //Check if left button has been pressed. If so, continue checks to assign points.
  if (lbuttonFlag) {

    // Check if GREATDelay is expired. If yes, move on. If no, assign "great" points and expire both GREAT and OKAY delays.
    if (LGREATDelay.isExpired()) {

      //Check if OKAYDelay is expired. If yes, the user missed and decrement by "miss" points. If not, assign "okay" points and expire okay delay.
      if (LOKAYDelay.isExpired()) {
        score = score - miss;
        CircuitPlayground.setPixelColor(0, 255, 0, 0); //Set pixel color to red to indicate MISS
        Serial.println("Miss!");
      } else {
        score = score + okay;
        CircuitPlayground.setPixelColor(0, 255, 255, 0); //Set pixel color to yellow to indicate OKAY
        LOKAYDelay.expire();
        Serial.println("Okay!");
      }

    } else {
      score = score + great;
      CircuitPlayground.setPixelColor(0, 0, 255, 0); //Set pixel color to green to indicate GREAT
      LGREATDelay.expire();
      LOKAYDelay.expire();
      Serial.println("GREAT!");
    }

    //Set buttonFlag back to 0
    lbuttonFlag = 0;

    //Print score with each button press
    Serial.print("Current Score: ");
    Serial.println(score);

  }

  //Check each of the offset delays. If they are expired and the corresponding flag is true, start the corresponding point delay.
  if (RGREAToffset.isExpired() && RGREATflag) {
    RGREATDelay.restart();
    RGREATflag = 0;
  }

  if (ROKAYoffset.isExpired() && ROKAYflag) {
    ROKAYDelay.restart();
    ROKAYflag = 0;
  }

  if (LGREAToffset.isExpired() && LGREATflag) {
    LGREATDelay.restart();
    LGREATflag = 0;
  }

  if (LOKAYoffset.isExpired() && LOKAYflag) {
    LOKAYDelay.restart();
    LOKAYflag = 0;
  }

  //Check if meterDelay is expired. If so, increment meter by 1, "push" LEDS up by 1 on right side, and check to see if delays begin.
  if (meterDelay.isExpired() && meter < sizeof(spearOfJustice)/sizeof(int)) {

    meter = ++meter;

    CircuitPlayground.clearPixels();
    //"push" the lit pixels up by 1. First for loop pushes right side up, second for loop pushes left side up. Odd beats are red, even beats are blue.
    for (int k=9; k>5; k--) {
      if (litPixels[k-1]) {
        CircuitPlayground.setPixelColor(k, 0, 0, 255);
        litPixels[k] = 1;
        litPixels[k-1] = 0;
      }
    }

    for (int k=0; k<4; k++) {
      if (litPixels[k+1]) {
        CircuitPlayground.setPixelColor(k, 0, 0, 255);
        litPixels[k] = 1;
        litPixels[k+1] = 0;
      }
    }

    //RIGHT SIDE
    //If the bool 4 beats ahead of meter is true, light up the bottom right side pixel
    if (RDemon[meter+4] && meter+4 < sizeof(spearOfJustice)/sizeof(int)) {
      CircuitPlayground.setPixelColor(5, 0, 0, 255);
      litPixels[5]=1;
    }

    //If the bool 3 beats ahead of meter is true, start OKAYoffset
    if (RDemon[meter+3] && meter+3 < sizeof(spearOfJustice)/sizeof(int)) {
      ROKAYoffset.restart();
      ROKAYflag = 1;
      //Serial.println("OKAY DELAY START");
    }

    //If the bool 1 beat ahead of meter is true, start GREAToffset
    if (RDemon[meter+1] && meter+1 < sizeof(spearOfJustice)/sizeof(int)) {
      RGREAToffset.restart();
      RGREATflag = 1;
      //Serial.println("GREAT DELAY START");
    }

    //LEFT SIDE
    if (LDemon[meter+4] && meter+4 < sizeof(spearOfJustice)/sizeof(int)) {
      CircuitPlayground.setPixelColor(4, 0, 0, 255);
      litPixels[4]=1;
    }

        //If the bool 3 beats ahead of meter is true, start OKAYoffset
    if (LDemon[meter+3] && meter+3 < sizeof(spearOfJustice)/sizeof(int)) {
      LOKAYoffset.restart();
      LOKAYflag = 1;
    }

    //If the bool 1 beat ahead of meter is true, start GREAToffset
    if (LDemon[meter+1] && meter+1 < sizeof(spearOfJustice)/sizeof(int)) {
      LGREAToffset.restart();
      LGREATflag = 1;
    }

    //If the element is not 128, play the tone. Otherwise, keep playing the last tone played.
    if (spearOfJustice[meter] != 128 && meter < sizeof(spearOfJustice)/sizeof(int)) {
      //Directs the command to pin A0, which is the speaker
      noTone(A0);
      tone(A0, midi[spearOfJustice[meter]]);
    }

    //Restart meterDelay from when it expired
    meterDelay.repeat();

  } else if (meter == sizeof(spearOfJustice)/sizeof(int)) {
    noTone(A0);
    CircuitPlayground.playTone(127, 10);
    Serial.print("FINAL SCORE: ");
    Serial.println(score);
    announce();
    meter = ++meter;
  }

}


//Place holder function to set up speaking-related components. All arrays obtained from Examples: SpeechDemos for CircuitPlayground Express.
void announceSetup() {
}

  //Define all soundbite arrays for auditory component. 
  const uint8_t spSCORE[]     PROGMEM = {0x06,0xF8,0x46,0xCB,0x00,0x4F,0x79,0x28,0xE0,0x3B,0x75,0x03,0xFC,0xE0,0xE1,0x80,0xEB,0xAC,0x11,0x28,0x94,0xBB,0x8B,0xC8,0x06,0x05,0xA4,0x51,0xC4,0x80,0x78,0x87,0x8B,0x17,0xF3,0x90,0x9A,0x37,0x3A,0x6E,0xC1,0xD3,0x96,0x94,0xFB,0x78,0x05,0xF5,0x78,0xB1,0xDF,0x13,0x64,0xB2,0x6D,0x41,0x79,0x4E,0x94,0xE9,0xB6,0x39,0xE5,0x59,0x99,0xF7,0x97,0x66,0xB2,0x69,0x14,0x3E,0x4E,0xB8,0xC8,0xAA,0x52,0xFB,0x5C,0x95,0x68,0xAF,0x4B,0x6B,0x7A,0x47,0x50,0x5E,0x2E,0x9D,0xA9,0x55,0x41,0xB1,0xB8,0x74,0x3E,0x66,0x27,0xE9,0x9A,0xD6,0x7B,0xDF,0x55,0xC2,0x5D,0x5B,0x1F,0x5C,0x75,0x33,0x6F,0x6D,0x7D,0xF4,0x55,0xC9,0xB2,0xA5,0x75,0xC9,0x59,0x85,0xFA,0xE6,0x3A,0xFC,0x11,0x39,0x79,0x61,0x51,0x65};

  const uint8_t spIS[]            PROGMEM = {0xAD,0xED,0xD5,0x58,0xA4,0x9E,0xCE,0x76,0xF5,0xDD,0xAB,0x29,0xF5,0xD2,0xDD,0xEF,0x7E,0x0C,0xC3,0xA9,0x06,0xFA,0xD3,0x32,0x0F,0x6E,0x94,0x22,0x8F,0xF3,0x92,0xF6,0x05,0x43,0xCC,0x74,0x77,0x3E,0xC3,0xF5,0x95,0x98,0xA9,0xBA,0x8B,0x8F,0x00,0x7E,0x73,0xE5,0x00,0x05,0x28,0xF0,0xFF};

  //Single Digits
  const uint8_t spZERO[]          PROGMEM = {0x69,0xFB,0x59,0xDD,0x51,0xD5,0xD7,0xB5,0x6F,0x0A,0x78,0xC0,0x52,0x01,0x0F,0x50,0xAC,0xF6,0xA8,0x16,0x15,0xF2,0x7B,0xEA,0x19,0x47,0xD0,0x64,0xEB,0xAD,0x76,0xB5,0xEB,0xD1,0x96,0x24,0x6E,0x62,0x6D,0x5B,0x1F,0x0A,0xA7,0xB9,0xC5,0xAB,0xFD,0x1A,0x62,0xF0,0xF0,0xE2,0x6C,0x73,0x1C,0x73,0x52,0x1D,0x19,0x94,0x6F,0xCE,0x7D,0xED,0x6B,0xD9,0x82,0xDC,0x48,0xC7,0x2E,0x71,0x8B,0xBB,0xDF,0xFF,0x1F};
  const uint8_t spONE[]           PROGMEM = {0x66,0x4E,0xA8,0x7A,0x8D,0xED,0xC4,0xB5,0xCD,0x89,0xD4,0xBC,0xA2,0xDB,0xD1,0x27,0xBE,0x33,0x4C,0xD9,0x4F,0x9B,0x4D,0x57,0x8A,0x76,0xBE,0xF5,0xA9,0xAA,0x2E,0x4F,0xD5,0xCD,0xB7,0xD9,0x43,0x5B,0x87,0x13,0x4C,0x0D,0xA7,0x75,0xAB,0x7B,0x3E,0xE3,0x19,0x6F,0x7F,0xA7,0xA7,0xF9,0xD0,0x30,0x5B,0x1D,0x9E,0x9A,0x34,0x44,0xBC,0xB6,0x7D,0xFE,0x1F};
  const uint8_t spTWO[]           PROGMEM = {0x06,0xB8,0x59,0x34,0x00,0x27,0xD6,0x38,0x60,0x58,0xD3,0x91,0x55,0x2D,0xAA,0x65,0x9D,0x4F,0xD1,0xB8,0x39,0x17,0x67,0xBF,0xC5,0xAE,0x5A,0x1D,0xB5,0x7A,0x06,0xF6,0xA9,0x7D,0x9D,0xD2,0x6C,0x55,0xA5,0x26,0x75,0xC9,0x9B,0xDF,0xFC,0x6E,0x0E,0x63,0x3A,0x34,0x70,0xAF,0x3E,0xFF,0x1F};
  const uint8_t spTHREE[]         PROGMEM = {0x0C,0xE8,0x2E,0x94,0x01,0x4D,0xBA,0x4A,0x40,0x03,0x16,0x68,0x69,0x36,0x1C,0xE9,0xBA,0xB8,0xE5,0x39,0x70,0x72,0x84,0xDB,0x51,0xA4,0xA8,0x4E,0xA3,0xC9,0x77,0xB1,0xCA,0xD6,0x52,0xA8,0x71,0xED,0x2A,0x7B,0x4B,0xA6,0xE0,0x37,0xB7,0x5A,0xDD,0x48,0x8E,0x94,0xF1,0x64,0xCE,0x6D,0x19,0x55,0x91,0xBC,0x6E,0xD7,0xAD,0x1E,0xF5,0xAA,0x77,0x7A,0xC6,0x70,0x22,0xCD,0xC7,0xF9,0x89,0xCF,0xFF,0x03};
  const uint8_t spFOUR[]          PROGMEM = {0x08,0x68,0x21,0x0D,0x03,0x04,0x28,0xCE,0x92,0x03,0x23,0x4A,0xCA,0xA6,0x1C,0xDA,0xAD,0xB4,0x70,0xED,0x19,0x64,0xB7,0xD3,0x91,0x45,0x51,0x35,0x89,0xEA,0x66,0xDE,0xEA,0xE0,0xAB,0xD3,0x29,0x4F,0x1F,0xFA,0x52,0xF6,0x90,0x52,0x3B,0x25,0x7F,0xDD,0xCB,0x9D,0x72,0x72,0x8C,0x79,0xCB,0x6F,0xFA,0xD2,0x10,0x9E,0xB4,0x2C,0xE1,0x4F,0x25,0x70,0x3A,0xDC,0xBA,0x2F,0x6F,0xC1,0x75,0xCB,0xF2,0xFF};
  const uint8_t spFIVE[]          PROGMEM = {0x08,0x68,0x4E,0x9D,0x02,0x1C,0x60,0xC0,0x8C,0x69,0x12,0xB0,0xC0,0x28,0xAB,0x8C,0x9C,0xC0,0x2D,0xBB,0x38,0x79,0x31,0x15,0xA3,0xB6,0xE4,0x16,0xB7,0xDC,0xF5,0x6E,0x57,0xDF,0x54,0x5B,0x85,0xBE,0xD9,0xE3,0x5C,0xC6,0xD6,0x6D,0xB1,0xA5,0xBF,0x99,0x5B,0x3B,0x5A,0x30,0x09,0xAF,0x2F,0xED,0xEC,0x31,0xC4,0x5C,0xBE,0xD6,0x33,0xDD,0xAD,0x88,0x87,0xE2,0xD2,0xF2,0xF4,0xE0,0x16,0x2A,0xB2,0xE3,0x63,0x1F,0xF9,0xF0,0xE7,0xFF,0x01};
  const uint8_t spSIX[]           PROGMEM = {0x04,0xF8,0xAD,0x4C,0x02,0x16,0xB0,0x80,0x06,0x56,0x35,0x5D,0xA8,0x2A,0x6D,0xB9,0xCD,0x69,0xBB,0x2B,0x55,0xB5,0x2D,0xB7,0xDB,0xFD,0x9C,0x0D,0xD8,0x32,0x8A,0x7B,0xBC,0x02,0x00,0x03,0x0C,0xB1,0x2E,0x80,0xDF,0xD2,0x35,0x20,0x01,0x0E,0x60,0xE0,0xFF,0x01};
  const uint8_t spSEVEN[]         PROGMEM = {0x0C,0xF8,0x5E,0x4C,0x01,0xBF,0x95,0x7B,0xC0,0x02,0x16,0xB0,0xC0,0xC8,0xBA,0x36,0x4D,0xB7,0x27,0x37,0xBB,0xC5,0x29,0xBA,0x71,0x6D,0xB7,0xB5,0xAB,0xA8,0xCE,0xBD,0xD4,0xDE,0xA6,0xB2,0x5A,0xB1,0x34,0x6A,0x1D,0xA7,0x35,0x37,0xE5,0x5A,0xAE,0x6B,0xEE,0xD2,0xB6,0x26,0x4C,0x37,0xF5,0x4D,0xB9,0x9A,0x34,0x39,0xB7,0xC6,0xE1,0x1E,0x81,0xD8,0xA2,0xEC,0xE6,0xC7,0x7F,0xFE,0xFB,0x7F};
  const uint8_t spEIGHT[]         PROGMEM = {0x65,0x69,0x89,0xC5,0x73,0x66,0xDF,0xE9,0x8C,0x33,0x0E,0x41,0xC6,0xEA,0x5B,0xEF,0x7A,0xF5,0x33,0x25,0x50,0xE5,0xEA,0x39,0xD7,0xC5,0x6E,0x08,0x14,0xC1,0xDD,0x45,0x64,0x03,0x00,0x80,0x00,0xAE,0x70,0x33,0xC0,0x73,0x33,0x1A,0x10,0x40,0x8F,0x2B,0x14,0xF8,0x7F};
  const uint8_t spNINE[]          PROGMEM = {0xE6,0xA8,0x1A,0x35,0x5D,0xD6,0x9A,0x35,0x4B,0x8C,0x4E,0x6B,0x1A,0xD6,0xA6,0x51,0xB2,0xB5,0xEE,0x58,0x9A,0x13,0x4F,0xB5,0x35,0x67,0x68,0x26,0x3D,0x4D,0x97,0x9C,0xBE,0xC9,0x75,0x2F,0x6D,0x7B,0xBB,0x5B,0xDF,0xFA,0x36,0xA7,0xEF,0xBA,0x25,0xDA,0x16,0xDF,0x69,0xAC,0x23,0x05,0x45,0xF9,0xAC,0xB9,0x8F,0xA3,0x97,0x20,0x73,0x9F,0x54,0xCE,0x1E,0x45,0xC2,0xA2,0x4E,0x3E,0xD3,0xD5,0x3D,0xB1,0x79,0x24,0x0D,0xD7,0x48,0x4C,0x6E,0xE1,0x2C,0xDE,0xFF,0x0F};

  //10s, use combinations of sounds as necessary
  const uint8_t spTEN[]           PROGMEM = {0x0E,0x38,0x3C,0x2D,0x00,0x5F,0xB6,0x19,0x60,0xA8,0x90,0x93,0x36,0x2B,0xE2,0x99,0xB3,0x4E,0xD9,0x7D,0x89,0x85,0x2F,0xBE,0xD5,0xAD,0x4F,0x3F,0x64,0xAB,0xA4,0x3E,0xBA,0xD3,0x59,0x9A,0x2E,0x75,0xD5,0x39,0x6D,0x6B,0x0A,0x2D,0x3C,0xEC,0xE5,0xDD,0x1F,0xFE,0xB0,0xE7,0xFF,0x03};
  const uint8_t spELEVEN[]        PROGMEM = {0xA5,0xEF,0xD6,0x50,0x3B,0x67,0x8F,0xB9,0x3B,0x23,0x49,0x7F,0x33,0x87,0x31,0x0C,0xE9,0x22,0x49,0x7D,0x56,0xDF,0x69,0xAA,0x39,0x6D,0x59,0xDD,0x82,0x56,0x92,0xDA,0xE5,0x74,0x9D,0xA7,0xA6,0xD3,0x9A,0x53,0x37,0x99,0x56,0xA6,0x6F,0x4F,0x59,0x9D,0x7B,0x89,0x2F,0xDD,0xC5,0x28,0xAA,0x15,0x4B,0xA3,0xD6,0xAE,0x8C,0x8A,0xAD,0x54,0x3B,0xA7,0xA9,0x3B,0xB3,0x54,0x5D,0x33,0xE6,0xA6,0x5C,0xCB,0x75,0xCD,0x5E,0xC6,0xDA,0xA4,0xCA,0xB9,0x35,0xAE,0x67,0xB8,0x46,0x40,0xB6,0x28,0xBB,0xF1,0xF6,0xB7,0xB9,0x47,0x20,0xB6,0x28,0xBB,0xFF,0x0F};
  const uint8_t spTWELVE[]        PROGMEM = {0x09,0x98,0xDA,0x22,0x01,0x37,0x78,0x1A,0x20,0x85,0xD1,0x50,0x3A,0x33,0x11,0x81,0x5D,0x5B,0x95,0xD4,0x44,0x04,0x76,0x9D,0xD5,0xA9,0x3A,0xAB,0xF0,0xA1,0x3E,0xB7,0xBA,0xD5,0xA9,0x2B,0xEB,0xCC,0xA0,0x3E,0xB7,0xBD,0xC3,0x5A,0x3B,0xC8,0x69,0x67,0xBD,0xFB,0xE8,0x67,0xBF,0xCA,0x9D,0xE9,0x74,0x08,0xE7,0xCE,0x77,0x78,0x06,0x89,0x32,0x57,0xD6,0xF1,0xF1,0x8F,0x7D,0xFE,0x1F};
  const uint8_t spTHIRTEEN[]      PROGMEM = {0x08,0x18,0xA2,0x12,0x03,0x18,0x40,0xC0,0x50,0x13,0x25,0x1D,0x3A,0x55,0x9D,0x5B,0xAF,0xAA,0xAB,0x74,0x4A,0xE9,0xB6,0xAA,0x6A,0xC7,0xA0,0xDD,0xDD,0xA8,0xAA,0x1F,0x82,0x75,0xED,0xA5,0x2A,0x8D,0x31,0xC6,0xB3,0x21,0x70,0x8A,0x52,0x15,0xAA,0x01,0x00,0x10,0x80,0xED,0x2C,0x12,0x70,0x53,0x55,0x00,0x66,0x2E,0x1D,0xD9,0x8C,0x46,0x14,0xB9,0x64,0xD5,0xD3,0x1B,0xD2,0xD4,0xAC,0xD1,0x2E,0x6B,0x44,0x9B,0xA5,0x46,0xBF,0xAC,0x91,0x6E,0x04,0x19,0xE3,0xD2,0x4A,0x76,0x6E,0xA4,0x2D,0xCB,0x2A,0xC9,0x65,0xE8,0xB6,0x0D,0x29,0x6C,0xEB,0xA1,0xC3,0xD1,0x1D,0x54,0xB9,0x28,0x75,0x67,0xB7,0x90,0xE5,0x6A,0x27,0xDC,0xDD,0xA1,0xB7,0xB9,0x92,0xF2,0x77,0x1B,0x1C,0x92,0x0D,0xDD,0xDF,0x92,0x9A,0x59,0x55,0xFC,0x7F};
  const uint8_t spFOURTEEN[] PROGMEM = {0x08,0xE8,0x2A,0x94,0x00,0xC3,0x56,0x10,0x60,0xFA,0x0A,0x01,0x4C,0x97,0xAE,0x80,0x66,0xCB,0x4A,0x6F,0xF3,0x84,0xB1,0xB4,0x6E,0x9D,0x73,0x57,0x1A,0xD0,0x6E,0x74,0xC1,0x7D,0x71,0x61,0xD6,0x51,0x07,0xF7,0x26,0x25,0xDE,0x46,0x15,0xED,0x52,0x37,0xFB,0x29,0x65,0x1E,0x18,0x61,0xD6,0x1A,0x81,0x53,0x94,0xAA,0x50,0x0D,0x00,0x80,0x02,0x2C,0xE3,0x5E,0x80,0x13,0xBA,0x13,0x30,0x43,0xDB,0x2A,0x46,0x34,0xA2,0x8E,0xC5,0xAB,0x9A,0xDE,0x88,0x2E,0x4A,0xAD,0x7A,0x7A,0x25,0x7E,0x0F,0xB2,0xDA,0x69,0x84,0xED,0xC4,0xEC,0xEA,0xA6,0x15,0xF6,0x53,0xB1,0x6B,0x18,0x56,0x38,0x4F,0xCC,0x8D,0x71,0x5A,0x61,0x7F,0x35,0x3A,0xC6,0xA1,0x44,0xFC,0xCD,0x74,0x9B,0xBA,0xC1,0xCA,0x54,0xAB,0x6D,0x6C,0x06,0x3B,0x5D,0xED,0xB4,0xA1,0x29,0x6A,0x37,0x57,0xDD,0x86,0x2A,0xA9,0x52,0x43,0x51,0xEB,0xAA,0x0E,0x8E,0xA8,0x48,0xFF,0x0F};
  const uint8_t spFIFTEEN[]       PROGMEM = {0x02,0x68,0xD6,0xCC,0x00,0x43,0x9A,0x39,0x60,0x3A,0xF7,0x51,0x34,0x5B,0x6A,0x2C,0x6D,0x4E,0xD5,0x92,0x99,0x89,0x2C,0x39,0x55,0xF3,0xAE,0xA6,0x32,0x67,0x54,0xC5,0x99,0xB9,0xC8,0x1C,0x07,0x0C,0xA5,0x94,0x01,0x04,0x4E,0x51,0xAA,0x42,0x35,0x00,0x02,0xB0,0x84,0x4A,0x6B,0x4F,0x6C,0x23,0x15,0x2F,0x6D,0x18,0xC1,0x44,0xC2,0x17,0x8F,0x69,0xBA,0x54,0xA8,0x58,0x3D,0xE6,0x6D,0x53,0xA1,0x73,0xF5,0x5A,0xA6,0x31,0xA2,0x8D,0x89,0x63,0x9D,0xCE,0x88,0xD6,0x47,0xB6,0x75,0x5B,0x13,0x6C,0xAF,0x54,0x96,0x61,0x84,0x22,0x64,0x74,0x59,0x9A,0x61,0x4B,0x0D,0xA7,0x65,0x6A,0x86,0xD2,0x23,0x5C,0xA7,0xB1,0x08,0xCA,0xB0,0x70,0x9D,0x86,0xA2,0x38,0xC9,0xA2,0x55,0xE8,0x32,0x11,0x8F,0x94,0xD6,0xFF,0x0F};
  const uint8_t spSIXTEEN[]       PROGMEM = {0x0C,0x78,0xC6,0x95,0x01,0x3F,0xA5,0x28,0xE0,0xB7,0x52,0x0B,0x04,0xE0,0xB7,0x54,0x07,0xFC,0x52,0x66,0x80,0x9F,0xCB,0x96,0xB7,0xA5,0x1B,0x9B,0x66,0x5A,0x59,0xB3,0x26,0x1A,0xF6,0xA6,0x15,0xCD,0x2B,0x59,0xFA,0x6A,0x04,0x4E,0x51,0xAA,0x42,0x35,0x40,0x01,0x25,0xA7,0x24,0xE0,0x98,0x1E,0x07,0xFC,0x9D,0x2E,0x80,0x57,0x9D,0x18,0xB0,0x05,0x6A,0x02,0xAE,0x54,0x1D,0x6D,0x77,0xCA,0xEA,0xF9,0x78,0xF5,0xD3,0x1A,0x51,0xE7,0xE2,0x35,0x4F,0x6F,0xC4,0x53,0x93,0xC6,0x3A,0x9D,0x91,0x6C,0x86,0x6A,0xC7,0x34,0x2A,0x7A,0x66,0x36,0x9D,0xD3,0xA9,0xC8,0x99,0xD5,0x72,0x75,0xC7,0x92,0xA3,0x96,0xC3,0xD3,0x3D,0x46,0xA4,0x3A,0x09,0x4F,0x73,0x98,0xE1,0xEA,0x24,0x3C,0xDD,0x92,0x87,0xBB,0x93,0xF4,0x0D,0x63,0x94,0x2E,0x75,0xFF,0x1F};
  const uint8_t spSEVENTEEN[]     PROGMEM = {0x0C,0xF8,0x29,0x45,0x01,0xBF,0x95,0x5A,0x20,0x00,0xBF,0xA5,0x3A,0xE0,0x97,0x32,0x03,0xFC,0x5C,0xB6,0xAA,0x26,0x53,0xD5,0x7D,0xF5,0x6A,0x8A,0x4E,0xB5,0xCC,0x47,0xAB,0xAB,0xAA,0xD4,0xC2,0x36,0xA7,0x31,0xF9,0x30,0x33,0x49,0x9D,0x86,0x6C,0xD5,0x5D,0xA4,0xF5,0xE8,0xAB,0x32,0x37,0x97,0x95,0x69,0xA8,0x0A,0x7B,0x50,0xD5,0xA5,0xA1,0x69,0xA8,0x56,0x63,0x1B,0xC6,0xA6,0xB1,0x43,0xD4,0x35,0x24,0xE0,0x18,0xB3,0x96,0xAF,0xBC,0x99,0x86,0x9A,0x5A,0xD5,0x2C,0x71,0xD6,0xC4,0x5C,0xF5,0x2C,0x4E,0x94,0x31,0x6B,0x35,0x33,0x1A,0xF2,0x64,0xE9,0xD5,0x4F,0xAF,0xA8,0x1B,0x81,0xC7,0xBC,0xAC,0x91,0x9E,0x1B,0x29,0xDB,0x32,0x8A,0x7A,0x19,0xA8,0xEC,0x43,0x08,0xC5,0xB9,0xE9,0xF4,0x34,0x0D,0x35,0xAE,0x76,0xD3,0x5B,0x14,0x76,0xA9,0x3B,0x4A,0x7F,0x77,0x58,0xA1,0xE6,0x38,0xFD,0xDD,0x51,0x9A,0xBB,0xAB,0xF4,0x57,0x67,0x16,0xDA,0xB3,0xFE,0x1F};
  const uint8_t spEIGHTEEN[]      PROGMEM = {0x6B,0x18,0x36,0x88,0x3B,0x1B,0xEF,0x61,0x0D,0xD3,0x27,0x52,0xE5,0x9A,0x51,0x8F,0x1E,0xC8,0x96,0x4B,0x5A,0xD5,0x03,0x61,0xD5,0xCC,0x72,0x75,0x35,0x10,0xD3,0x13,0x11,0x81,0x53,0x94,0xAA,0x50,0x0D,0x80,0x02,0x2C,0x95,0x5A,0x80,0x17,0xC7,0x57,0x3E,0xBD,0x33,0x6B,0x36,0x59,0xD5,0xC8,0x4E,0xE4,0xB9,0x64,0xD5,0x33,0x24,0x61,0xE7,0xA4,0x35,0x2C,0xEF,0x28,0x9B,0xA5,0xC6,0x38,0x9D,0xA2,0x5F,0x84,0x6E,0xCB,0x74,0x8A,0x7E,0x6E,0xA6,0xEC,0xCD,0xB0,0x76,0x4B,0xD4,0x72,0x74,0x87,0x1E,0xA9,0x76,0xD2,0x3D,0x3C,0x59,0x84,0x26,0x4D,0x4F,0xD3,0x68,0x15,0xEE,0xE4,0xFF,0x01};
  const uint8_t spNINETEEN[]      PROGMEM = {0x6E,0x2F,0x44,0xB4,0x5B,0x93,0xA6,0xAD,0x32,0x96,0x2E,0x69,0xBA,0x96,0x26,0xD3,0xCC,0x65,0xF1,0x1A,0x9B,0x9C,0xE0,0xD4,0x2D,0x6B,0x68,0xA6,0xCD,0xCA,0x56,0xAF,0xAE,0xB9,0x64,0x6F,0x5F,0xB4,0xEA,0xE6,0x84,0xA7,0xA3,0x52,0xAB,0x5B,0x40,0xAB,0x28,0xD3,0xAE,0xCD,0x0A,0xC7,0x5D,0x35,0x23,0x70,0x8A,0x52,0x15,0xAA,0x01,0x50,0x80,0xAB,0x4C,0x0A,0xB0,0x7C,0x4B,0xCB,0x57,0xDE,0x4C,0x43,0x4D,0xAD,0x6A,0x96,0x38,0x6B,0x62,0xAE,0x7A,0x16,0x27,0xCA,0x98,0xB5,0x9A,0x19,0x0D,0x79,0xB2,0xF4,0xEA,0xA7,0x57,0xD4,0x8D,0xC0,0x63,0x5E,0xD6,0x48,0xCF,0x8D,0x94,0x6D,0x19,0x45,0xBD,0x0C,0x54,0xF6,0x21,0x84,0xE2,0xDC,0x74,0x79,0x9A,0x86,0x1A,0x57,0xBB,0xE5,0x2D,0x0A,0xBB,0xD4,0x1D,0x95,0xBF,0x3B,0xAC,0x50,0x73,0x5C,0xFE,0xEE,0x28,0xCD,0xDD,0x55,0xF8,0xAB,0x33,0x0B,0xED,0x59,0xFF,0x0F};

  //20s-1000s
  const uint8_t spTWENTY[]        PROGMEM = {0x0A,0xE8,0x4A,0xCD,0x01,0xDB,0xB9,0x33,0xC0,0xA6,0x54,0x0C,0xA4,0x34,0xD9,0xF2,0x0A,0x6C,0xBB,0xB3,0x53,0x0E,0x5D,0xA6,0x25,0x9B,0x6F,0x75,0xCA,0x61,0x52,0xDC,0x74,0x49,0xA9,0x8A,0xC4,0x76,0x4D,0xD7,0xB1,0x76,0xC0,0x55,0xA6,0x65,0xD8,0x26,0x99,0x5C,0x56,0xAD,0xB9,0x25,0x23,0xD5,0x7C,0x32,0x96,0xE9,0x9B,0x20,0x7D,0xCB,0x3C,0xFA,0x55,0xAE,0x99,0x1A,0x30,0xFC,0x4B,0x3C,0xFF,0x1F};
  const uint8_t spTHIRTY[]        PROGMEM = {0x02,0x18,0xA2,0x52,0x02,0x16,0x60,0xC0,0x50,0x13,0x25,0x6B,0x2C,0xC4,0xDC,0x52,0xAF,0xB2,0x8B,0x70,0x2A,0xCD,0xBA,0xAA,0xAA,0xC7,0x60,0xCC,0xFD,0xAA,0x8B,0x5D,0x85,0x35,0xED,0xA3,0x2B,0xD3,0x31,0x52,0xF2,0x2A,0xA0,0x7A,0xA5,0x00,0x2C,0xED,0xD2,0xFA,0x9E,0x8C,0x45,0x7D,0xF5,0xD8,0xBA,0x55,0xB2,0xAC,0xD5,0xED,0xE8,0xDE,0x51,0x2A,0x57,0x97,0xA7,0x07,0x41,0xAF,0x5A,0xEC,0xB6,0xEE,0x19,0x7D,0x7A,0xB1,0x9B,0xBA,0x23,0xCC,0xE9,0x5A,0xFF,0x0F};
  const uint8_t spFOURTY[]        PROGMEM = {0x04,0xC8,0xCE,0x8C,0x01,0xCB,0x94,0x33,0x60,0xDA,0x0C,0x01,0x0C,0x13,0xAE,0x80,0xEA,0xD3,0x4A,0x1D,0xC4,0xB4,0x26,0x39,0x1E,0x75,0xA2,0xB3,0x9C,0xAC,0x7E,0x54,0x51,0xEC,0x52,0xAA,0xFA,0x51,0x05,0x73,0xC1,0xE5,0xDC,0x47,0x9D,0xC2,0x8A,0xB5,0x6A,0x57,0x40,0xF5,0x4A,0x01,0x58,0xDA,0xA5,0x8D,0xC3,0x24,0x89,0x5B,0xAF,0xB1,0xB4,0x20,0xE4,0x5E,0x8B,0xC7,0xDA,0x9D,0xA3,0x54,0xBE,0x4E,0xF7,0x8C,0x41,0x98,0xF1,0xC6,0x3D,0x3D,0x0A,0xEA,0xF4,0x23,0xF7,0x34,0x47,0x9C,0x53,0x93,0xDC,0xD3,0x15,0x63,0x6D,0x4D,0x32,0xCF,0x98,0x41,0xA4,0xB9,0xF8,0xFF,0x01};
  const uint8_t spFIFTY[]         PROGMEM = {0x08,0x68,0x3A,0x05,0x01,0x5D,0xA4,0x12,0x60,0xD8,0x0A,0x02,0x4C,0x5F,0x21,0x80,0xE9,0xD2,0x15,0xD0,0x6C,0xD9,0x4A,0x9B,0x09,0x91,0x94,0x2D,0x2B,0xEF,0x2A,0x95,0x52,0x37,0xAF,0xA2,0xD9,0x52,0x09,0xFD,0x4C,0x80,0x61,0x2B,0x08,0x30,0x7D,0x85,0x00,0xA6,0x4B,0x47,0xE0,0x14,0xA5,0x2A,0x54,0x03,0x0A,0x30,0x74,0xD9,0xE8,0xBB,0x34,0xF2,0x8C,0xD5,0x63,0xE9,0x56,0x49,0x2B,0x1F,0xAF,0x6D,0x04,0x27,0xAA,0x58,0x53,0xEE,0x19,0x93,0x30,0xFD,0x4B,0xB9,0x67,0x70,0xE4,0xAA,0xD5,0xEE,0x6D,0x96,0xB1,0xA6,0x66,0x87,0xB7,0x67,0x22,0x8F,0xA9,0xFD,0xFF};
  const uint8_t spSIXTY[]         PROGMEM = {0x06,0x78,0x90,0xC4,0x00,0x3F,0x66,0x18,0xE0,0xA7,0x8C,0x04,0x7C,0x9F,0x11,0x80,0xDF,0xDA,0x57,0xD1,0x5D,0xBB,0x2B,0x2D,0x59,0x45,0x6B,0xA9,0xC6,0xB2,0xA6,0x14,0xAD,0x9B,0x18,0x59,0x17,0x04,0x4E,0x51,0xAA,0x42,0x35,0x40,0x01,0x35,0x8D,0x17,0xE0,0xC4,0x9A,0x02,0xBC,0x54,0x85,0xC0,0x29,0x4A,0x55,0xA8,0x06,0x04,0x60,0x48,0x37,0x07,0x6C,0xAE,0xB6,0xAA,0xA9,0x53,0x54,0xA5,0xCB,0xAA,0xBB,0x4B,0x12,0xB7,0x37,0x6B,0x18,0x31,0x51,0xDC,0x5F,0xAF,0x79,0x34,0x47,0xD1,0x58,0x3D,0xD6,0xD1,0x14,0xD5,0x72,0x71,0xDB,0x47,0x51,0xD4,0xC8,0xD7,0xFF,0x0F};
  const uint8_t spSEVENTY[]       PROGMEM = {0x0C,0xF8,0x29,0x45,0x01,0xBF,0x95,0x5A,0x20,0x00,0xBF,0xA5,0x3A,0xE0,0x97,0x32,0x03,0xFC,0x5C,0xB6,0x8A,0x2E,0x42,0xDD,0x6C,0xD3,0x2A,0x3B,0x2F,0xD3,0xB4,0xCD,0xAB,0xCA,0xA6,0xD4,0x2B,0x37,0xB5,0x3A,0x3A,0x8F,0x10,0x5B,0x99,0xFA,0x6C,0xC3,0xCC,0x78,0xD5,0x6A,0x8A,0x0D,0x0B,0xF5,0x47,0x63,0xAC,0x9A,0x33,0xC5,0x63,0xA7,0xB1,0x2A,0xEC,0x50,0xD7,0x9C,0x96,0x66,0xB0,0x92,0xC2,0x95,0x01,0x9E,0x32,0x2D,0xDB,0x0B,0xE3,0xE2,0xAC,0xAD,0xED,0x4D,0x39,0xB9,0xD5,0xC6,0xB5,0x0F,0x13,0xCC,0xE1,0x9B,0xC7,0xD1,0x9D,0x93,0x66,0x7C,0x2E,0xE7,0x70,0x49,0x94,0xBE,0xA5,0x5C,0xC3,0x25,0x72,0xC5,0xA6,0x72,0x0F,0xEF,0x28,0x59,0xAB,0xDD,0x3D,0xAA,0x91,0x58,0xAD,0xFA,0x7F};
  const uint8_t spEIGHTY[]        PROGMEM = {0x63,0xEA,0xD2,0x28,0x37,0x67,0xAD,0x7E,0xF9,0x26,0xAC,0x58,0xB3,0x9A,0x91,0x1C,0x34,0xB3,0xC9,0x68,0x46,0x13,0x54,0xEF,0x25,0xA3,0x1E,0x85,0xD1,0x7C,0x96,0x88,0x21,0x52,0xB3,0x71,0x4F,0xA4,0x80,0x25,0x42,0x4B,0x37,0x82,0x82,0xD9,0x2C,0x1E,0xD3,0x4C,0x06,0xEA,0xB5,0x64,0xAC,0xCB,0x3B,0x50,0xE5,0xE2,0xB2,0x2F,0xEB,0x40,0x53,0x8F,0xCB,0x39,0xBD,0x21,0x75,0x2D,0xCE,0x6F,0x7A,0x67,0x12,0x90,0xEC,0xD9,0xFF,0x0F};
  const uint8_t spNINETY[]        PROGMEM = {0x6E,0x28,0x1C,0xE3,0x38,0xB4,0xB8,0x3E,0x33,0xAA,0xE5,0xF0,0xB2,0xBA,0x26,0xD2,0x5D,0x6C,0xF5,0xA9,0x9A,0x9C,0xB0,0x90,0x35,0xA7,0xAA,0x76,0xDC,0x52,0xD6,0x9C,0xA2,0x56,0xB7,0x70,0x9D,0xB3,0xB2,0x56,0x4C,0xC2,0x7D,0xCA,0xCA,0x7A,0x11,0xF1,0x88,0x31,0xAD,0xE8,0x91,0x34,0xA2,0xCA,0x88,0xD6,0x08,0xAD,0xF4,0x4C,0x5C,0x80,0xA9,0x52,0x5A,0xB7,0xD2,0xB8,0x30,0xB6,0x19,0xC3,0x48,0x4A,0xE2,0xB1,0x64,0xCD,0x33,0x97,0xA0,0xE9,0x96,0xB1,0xCC,0xD8,0x02,0x6E,0x5F,0xDA,0x3A,0xD3,0x30,0xB8,0x7F,0x29,0xEB,0x4C,0x8D,0x10,0xB1,0xE5,0xFF,0x01};
  const uint8_t spHUNDRED[]       PROGMEM = {0x04,0xC8,0x7E,0x5C,0x02,0x0A,0xA8,0x62,0x43,0x03,0xA7,0xA8,0x62,0x43,0x4B,0x97,0xDC,0xF2,0x14,0xC5,0xA7,0x9B,0x7A,0xD3,0x95,0x37,0xC3,0x1E,0x16,0x4A,0x66,0x36,0xF3,0x5A,0x89,0x6E,0xD4,0x30,0x55,0xB5,0x32,0xB7,0x31,0xB5,0xC1,0x69,0x2C,0xE9,0xF7,0xBC,0x96,0x12,0x39,0xD4,0xB5,0xFD,0xDA,0x9B,0x0F,0xD1,0x90,0xEE,0xF5,0xE4,0x17,0x02,0x45,0x28,0x77,0x11,0xD9,0x40,0x9E,0x45,0xDD,0x2B,0x33,0x71,0x7A,0xBA,0x0B,0x13,0x95,0x2D,0xF9,0xF9,0x7F};
  const uint8_t spTHOUSAND[]      PROGMEM = {0x0C,0xE8,0x2E,0xD4,0x02,0x06,0x98,0xD2,0x55,0x03,0x16,0x68,0x7D,0x17,0xE9,0x6E,0xBC,0x65,0x8C,0x45,0x6D,0xA6,0xE9,0x96,0xDD,0xDE,0xF6,0xB6,0xB7,0x5E,0x75,0xD4,0x93,0xA5,0x9C,0x7B,0x57,0xB3,0x6E,0x7D,0x12,0x19,0xAD,0xDC,0x29,0x8D,0x4F,0x93,0xB4,0x87,0xD2,0xB6,0xFC,0xDD,0xAC,0x22,0x56,0x02,0x70,0x18,0xCA,0x18,0x26,0xB5,0x90,0xD4,0xDE,0x6B,0x29,0xDA,0x2D,0x25,0x17,0x8D,0x79,0x88,0xD4,0x48,0x79,0x5D,0xF7,0x74,0x75,0xA1,0x94,0xA9,0xD1,0xF2,0xED,0x9E,0xAA,0x51,0xA6,0xD4,0x9E,0x7F,0xED,0x6F,0xFE,0x2B,0xD1,0xC7,0x3D,0x89,0xFA,0xB7,0x0D,0x57,0xD3,0xB4,0xF5,0x37,0x55,0x37,0x2E,0xE6,0xB2,0xD7,0x57,0xFF,0x0F};

  //Define array for single digits
  const uint8_t* const digits[] PROGMEM = {
    spZERO,
    spONE,
    spTWO,
    spTHREE,
    spFOUR,
    spFIVE,
    spSIX,
    spSEVEN,
    spEIGHT,
    spNINE
  };

  //Define array for 10s
  const uint8_t* const tens[] PROGMEM = {
    spTEN,
    spELEVEN,
    spTWELVE,
    spTHIRTEEN,
    spFOURTEEN,
    spFIFTEEN,
    spSIXTEEN,
    spSEVENTEEN,
    spEIGHTEEN,
    spNINETEEN
  };

  //Define array for 10s place other then the 10s
  const uint8_t* const beyondtens[] PROGMEM = {
    spTWENTY,
    spTHIRTY,
    spFOURTY,
    spFIFTY,
    spSIXTY,
    spSEVENTY,
    spEIGHTY,
    spNINETY
  };

//Function to announce score at end of game
void announce() {

  CircuitPlayground.speaker.say(spSCORE);

  CircuitPlayground.speaker.say(spIS);

  //This series function essentially checks each digit place and will play the corresponding sound bite. For the special case of 0, the zeroFlag helps track if 0 must be said.

  bool zeroFlag = 0;

  //Say "[]] Thousand" if greater than or equal to 1000. First create a separate variable that is score%1000, then use the functions to say the first part.
  if (score >= 1000) {
    int thousandsPlaceHolder = score/1000;

    //Say "[hundredsplace] Hundred" if greater than or equal to 100
    if (thousandsPlaceHolder >= 100) {
      int hundredsplace = thousandsPlaceHolder/100;
      CircuitPlayground.speaker.say(digits[hundredsplace]);
      CircuitPlayground.speaker.say(spHUNDRED);

      //Subtract the hundreds from thousandsPlaceHolder for future references
      thousandsPlaceHolder = thousandsPlaceHolder-(hundredsplace*100);

      //Set off zeroFlag to indicate zero need not be said
      zeroFlag = 1;
    }

    //Say "[tensplace]" if greater than or equal to 20
    if (thousandsPlaceHolder >= 20) {
      int tensplace = thousandsPlaceHolder/10;
      int tensplaceIndex = tensplace - 2;
      CircuitPlayground.speaker.say(beyondtens[tensplaceIndex]);

      //Subtract the tens from thousandsPlaceHolder for future references
      thousandsPlaceHolder = thousandsPlaceHolder-(tensplace*10);

      //Set off zeroFlag to indicate zero need not be said
      zeroFlag = 1;
    }

    //If greater than or equal to 10, say the corresponding number. Else if zeroFlag = 1 AND sensordata is greater than or equal to 1, say the digit. Else if zeroFlag = 0, say "Zero".
    if (thousandsPlaceHolder >= 10) {
      int tensIndex = thousandsPlaceHolder-10;
      CircuitPlayground.speaker.say(tens[tensIndex]);
    } else if (thousandsPlaceHolder >= 1) {
      int roundedData = thousandsPlaceHolder/1;
      CircuitPlayground.speaker.say(digits[roundedData]);
    } 
    
    CircuitPlayground.speaker.say(spTHOUSAND);

    //Subtract 1000*thousandsPlaceHolder from score for future references
    score = score-1000*thousandsPlaceHolder;

    //Set off zeroFlag to indicate zero need not be said
    zeroFlag = 1;
  }

  //Say "[hundredsplace] Hundred" if greater than or equal to 100
  if (score >= 100) {
    int hundredsplace = score/100;
    CircuitPlayground.speaker.say(digits[hundredsplace]);
    CircuitPlayground.speaker.say(spHUNDRED);

    //Subtract the hundreds from score for future references
    score = score-(hundredsplace*100);

    //Set off zeroFlag to indicate zero need not be said
    zeroFlag = 1;
  }

  //Say "[tensplace]" if greater than or equal to 20
  if (score >= 20) {
    int tensplace = score/10;
    int tensplaceIndex = tensplace - 2;
    CircuitPlayground.speaker.say(beyondtens[tensplaceIndex]);

    //Subtract the tens from score for future references
    score = score-(tensplace*10);

    //Set off zeroFlag to indicate zero need not be said
    zeroFlag = 1;
  }

  //If greater than or equal to 10, say the corresponding number. Else if zeroFlag = 1 AND sensordata is greater than or equal to 1, say the digit. Else if zeroFlag = 0, say "Zero".
  if (score >= 10) {
    int tensIndex = score-10;
    CircuitPlayground.speaker.say(tens[tensIndex]);
  } else if (score >= 1) {
    int roundedData = score/1;
    CircuitPlayground.speaker.say(digits[roundedData]);
  } else if (!zeroFlag) {
    CircuitPlayground.speaker.say(spZERO);
  }
}

//Function to generate MIDI array
void generateMIDI()
{
  for (int x = 0; x < 127; ++x)
  {
    midi[x] = (A_four / 32.0) * pow(2.0, ((x - 9.0) / 12.0));
    Serial.println(midi[x]);
  }
}

//To make defining difficulties easy, the following formula was used for indices: (measure#)*(beat#)+4. For example, beat 1 of measure 1 is 5.

void defineDemon() {
  //For loop goes through every element of spearOfJustice. All odd beats are right, all left beats are left.
  for (int k=5; k < 1006; k++) {
    if (spearOfJustice[k] != 127 && spearOfJustice[k] != 128) {
      if (k%2 == 1) {
        RDemon[k] = 1;
      } else {
        LDemon[k] = 1;
      }
    }
  }
}
